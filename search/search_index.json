{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DMux : Nautobot CLI Tool \u00b6 Summary Installation Usage Guide Contributing More Help Summary \u00b6 DMux is Nautobot specific CLI tool that allows you to interact with Nautobot via the command line. In addition to Nautobot interactions, DMux also provides a set of tools to help with day-to-day, including an underlying ssh library that allows you to interact with devices via the command line. Contributions to DMux are extremely welcomed. To contribute, check out our CONTRIBUTING.md section. If you aren't a contributor, but would like to see something new in DMux, you can submit a GitHub Issue and I or someone from the community would be happy to dig into it. Usage Guide \u00b6 DMux uses a shared framework model where the core codebase focuses on system functionality and key storage, while the plugin system offers a wide variety of sub-commands that utilize the core framework. Installing \u00b6 DMux is currently built for Mac OSX and Linux 64-bit architectures. If your OS is not supported and you would like to see it added, please let us know. See the INSTALLATION.md guide for installation instructions. Contributing \u00b6 The design behind DMux was intented for it to be easy to contribute to, however, there's always room for improvement. If you have any suggestions, please feel free to open an issue or submit a pull request. As noted from above, check out the CONTRIBUTING.md guide for details on how to contribute. That being said, I don't want guidelines to get in the way of you contributing, so if you have any questions, please feel free to reach out to me or submit your pull request and I'll be happy to help you out. More help \u00b6 Email Josh Silvas","title":"Home"},{"location":"#dmux-nautobot-cli-tool","text":"Summary Installation Usage Guide Contributing More Help","title":"DMux : Nautobot CLI Tool"},{"location":"#summary","text":"DMux is Nautobot specific CLI tool that allows you to interact with Nautobot via the command line. In addition to Nautobot interactions, DMux also provides a set of tools to help with day-to-day, including an underlying ssh library that allows you to interact with devices via the command line. Contributions to DMux are extremely welcomed. To contribute, check out our CONTRIBUTING.md section. If you aren't a contributor, but would like to see something new in DMux, you can submit a GitHub Issue and I or someone from the community would be happy to dig into it.","title":"Summary"},{"location":"#usage-guide","text":"DMux uses a shared framework model where the core codebase focuses on system functionality and key storage, while the plugin system offers a wide variety of sub-commands that utilize the core framework.","title":"Usage Guide"},{"location":"#installing","text":"DMux is currently built for Mac OSX and Linux 64-bit architectures. If your OS is not supported and you would like to see it added, please let us know. See the INSTALLATION.md guide for installation instructions.","title":"Installing"},{"location":"#contributing","text":"The design behind DMux was intented for it to be easy to contribute to, however, there's always room for improvement. If you have any suggestions, please feel free to open an issue or submit a pull request. As noted from above, check out the CONTRIBUTING.md guide for details on how to contribute. That being said, I don't want guidelines to get in the way of you contributing, so if you have any questions, please feel free to reach out to me or submit your pull request and I'll be happy to help you out.","title":"Contributing"},{"location":"#more-help","text":"Email Josh Silvas","title":"More help"},{"location":"contributing/","text":"Contributing \u00b6 Contributing to DMux is intended to be as easy as possible. If you have any idea on how to make the development workflow better or easier, please submit a PR! At a high-level, all development and testing is set up with helper make commands so that the experience can be the same across developers. Creating your own Plugin \u00b6 DMux sub-commands are declared as plugins within the application. Each plugin should have an exportable function named Plugin that accepts a *core.Parser argument and returns a core.Plugin data type. An example framework of a basic plugin would be: package cool_plugin import ( \"fmt\" \"strings\" \"github.com/akamensky/argparse\" \"github.com/josh-silvas/dmux/core\" ) // Arguments are globally defined in the plugin package, so that the // invoker of your plugin can overwrite them with user-defined values. var arg1 *string func Plugin(p *core.Parser) core.Plugin { // This is what your main sub-command will be called. cmd := p.NewCommand(\"example\", \"An example plugin!\") // Any additional arguments you would like to add. arg1 = cmd.String(\"a\", \"some-arg\", &argparse.Options{Help: \"Explains what some-arg does.\"}) return core.Plugin{CMD: cmd, Func: pluginFunc} } func pluginFunc(cfg keyring.Settings) { // Within your `pluginFunc` is where all of the custom code will live // for your plugin. // When the command is invoked, this function will be called. // NOTE: The `cfg keyring.Settings` argument that your pluginFunc will be passed, // will give you the ability to access credentials stored in the DMux Keychain. // Example fetching the Nautobot api key from the DMux keychain: nKey, err := cfg.Nautobot() } NOTE: All plugins are stored in the plugins directory. Once your plugin is created, add it to the main parser in cmd/main.go , for example: // Add your plugin to this list, alphabetically please!! parser := core.NewParser( ansible.Plugin, console.Plugin, keystore.Plugin, libre.Plugin, info.Plugin, sshinteractive.Plugin, version.Plugin, ) Testing the Application \u00b6 All testing and linting for DMux are done in a development docker container so that we may produce similar results across development environments. When you run a make command, this repo will spin up the docker container as defined in the development/Dockerfile with all the packages you need to run linting and unit-testing. Running Tests with Make \u00b6 Each make command will run within the development container. If you would like to run them outside of the development container. Run the command with a prepended underscore ( _ ), for example, make _lint Command Description make tests Run all testing frameworks (same as CI pipeline). make lint Only run linting tests like golangci-lint and yamllint. make unittest Only run unit-testing. Runs for entire repository. make build Rebuild the development container. If dependencies change. Release a New Build \u00b6 The version plugin in DMux will periodically make a call-out to Artifactory to determine if a newer release has been published. If so, the users will get a notification to upgrade with the upgrade steps, depending on their architecture. To draft a new DMux release, you only need to publish the release on Github and Artifactory, and the users will update at their leisure. Pre-Reqs for Releasing a New Build \u00b6 Before you can release a new build, goreleaser needs credentials to the systems that it's going to communicate with to publish a new release. Please make sure you have the following defined Github token with release permissions to github.com/josh-silvas/dmux . Store the token in ~/.config/goreleaser/github_token Steps for Releasing a New Build \u00b6 Building of the Go binary Debian build for Linux installations Brew build for OSX installations (this includes the formula.rb generation) Archive build of tar.gz files Drafting of a new release in GitHub . Once you have completed the prereqs, you should be able to draft a new release using make: make release Note: this requires a clean git status and a new git tag. If you are wanting to test this release, run make test_release More help \u00b6 Send an email to Josh Silvas","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributing to DMux is intended to be as easy as possible. If you have any idea on how to make the development workflow better or easier, please submit a PR! At a high-level, all development and testing is set up with helper make commands so that the experience can be the same across developers.","title":"Contributing"},{"location":"contributing/#creating-your-own-plugin","text":"DMux sub-commands are declared as plugins within the application. Each plugin should have an exportable function named Plugin that accepts a *core.Parser argument and returns a core.Plugin data type. An example framework of a basic plugin would be: package cool_plugin import ( \"fmt\" \"strings\" \"github.com/akamensky/argparse\" \"github.com/josh-silvas/dmux/core\" ) // Arguments are globally defined in the plugin package, so that the // invoker of your plugin can overwrite them with user-defined values. var arg1 *string func Plugin(p *core.Parser) core.Plugin { // This is what your main sub-command will be called. cmd := p.NewCommand(\"example\", \"An example plugin!\") // Any additional arguments you would like to add. arg1 = cmd.String(\"a\", \"some-arg\", &argparse.Options{Help: \"Explains what some-arg does.\"}) return core.Plugin{CMD: cmd, Func: pluginFunc} } func pluginFunc(cfg keyring.Settings) { // Within your `pluginFunc` is where all of the custom code will live // for your plugin. // When the command is invoked, this function will be called. // NOTE: The `cfg keyring.Settings` argument that your pluginFunc will be passed, // will give you the ability to access credentials stored in the DMux Keychain. // Example fetching the Nautobot api key from the DMux keychain: nKey, err := cfg.Nautobot() } NOTE: All plugins are stored in the plugins directory. Once your plugin is created, add it to the main parser in cmd/main.go , for example: // Add your plugin to this list, alphabetically please!! parser := core.NewParser( ansible.Plugin, console.Plugin, keystore.Plugin, libre.Plugin, info.Plugin, sshinteractive.Plugin, version.Plugin, )","title":"Creating your own Plugin"},{"location":"contributing/#testing-the-application","text":"All testing and linting for DMux are done in a development docker container so that we may produce similar results across development environments. When you run a make command, this repo will spin up the docker container as defined in the development/Dockerfile with all the packages you need to run linting and unit-testing.","title":"Testing the Application"},{"location":"contributing/#running-tests-with-make","text":"Each make command will run within the development container. If you would like to run them outside of the development container. Run the command with a prepended underscore ( _ ), for example, make _lint Command Description make tests Run all testing frameworks (same as CI pipeline). make lint Only run linting tests like golangci-lint and yamllint. make unittest Only run unit-testing. Runs for entire repository. make build Rebuild the development container. If dependencies change.","title":"Running Tests with Make"},{"location":"contributing/#release-a-new-build","text":"The version plugin in DMux will periodically make a call-out to Artifactory to determine if a newer release has been published. If so, the users will get a notification to upgrade with the upgrade steps, depending on their architecture. To draft a new DMux release, you only need to publish the release on Github and Artifactory, and the users will update at their leisure.","title":"Release a New Build"},{"location":"contributing/#pre-reqs-for-releasing-a-new-build","text":"Before you can release a new build, goreleaser needs credentials to the systems that it's going to communicate with to publish a new release. Please make sure you have the following defined Github token with release permissions to github.com/josh-silvas/dmux . Store the token in ~/.config/goreleaser/github_token","title":"Pre-Reqs for Releasing a New Build"},{"location":"contributing/#steps-for-releasing-a-new-build","text":"Building of the Go binary Debian build for Linux installations Brew build for OSX installations (this includes the formula.rb generation) Archive build of tar.gz files Drafting of a new release in GitHub . Once you have completed the prereqs, you should be able to draft a new release using make: make release Note: this requires a clean git status and a new git tag. If you are wanting to test this release, run make test_release","title":"Steps for Releasing a New Build"},{"location":"contributing/#more-help","text":"Send an email to Josh Silvas","title":"More help"},{"location":"installation/","text":"Installing \u00b6 Mac OSX \u00b6 To install/update dmux on an OSX build, you can do so using Homebrew. If you do not already have brew installed on your machine, you can find installation instructions on the Homebrew website . If you have not already, add the dmux tap to your brew taps: brew tap josh-silvas/dmux git@github.com:josh-silvas/dmux Once tapped, you can install/upgrade/remove dmux using the regular brew methods brew update && brew install dmux brew update && brew upgrade dmux brew uninstall dmux Linux (Debian/Ubuntu) \u00b6 Installing on Linux is really just pulling down the .deb build and running dpkg to install it. TODO: Add instructions for installing on Linux","title":"Installing"},{"location":"installation/#installing","text":"","title":"Installing"},{"location":"installation/#mac-osx","text":"To install/update dmux on an OSX build, you can do so using Homebrew. If you do not already have brew installed on your machine, you can find installation instructions on the Homebrew website . If you have not already, add the dmux tap to your brew taps: brew tap josh-silvas/dmux git@github.com:josh-silvas/dmux Once tapped, you can install/upgrade/remove dmux using the regular brew methods brew update && brew install dmux brew update && brew upgrade dmux brew uninstall dmux","title":"Mac OSX"},{"location":"installation/#linux-debianubuntu","text":"Installing on Linux is really just pulling down the .deb build and running dpkg to install it. TODO: Add instructions for installing on Linux","title":"Linux (Debian/Ubuntu)"},{"location":"more_help/","text":"Additional Resources \u00b6 DMux contributions are welcomed from anyone who would like to contribute, that being said, you can reach out to fellow developers for assistance or any of the channels/email distribution-lists below: Resources \u00b6 Some external resource that may help when contributing to dmux. These are referencing some technologies that are used within the application. goreleaser golangci-lint.run go-pretty tables Email \u00b6 Josh Silvas Slack \u00b6 #dmux","title":"More Help"},{"location":"more_help/#additional-resources","text":"DMux contributions are welcomed from anyone who would like to contribute, that being said, you can reach out to fellow developers for assistance or any of the channels/email distribution-lists below:","title":"Additional Resources"},{"location":"more_help/#resources","text":"Some external resource that may help when contributing to dmux. These are referencing some technologies that are used within the application. goreleaser golangci-lint.run go-pretty tables","title":"Resources"},{"location":"more_help/#email","text":"Josh Silvas","title":"Email"},{"location":"more_help/#slack","text":"#dmux","title":"Slack"},{"location":"usage_guide/","text":"Usage Guide \u00b6 DMux uses a custom framework model where the core Go code focuses on system functionality, whereas the plugin system offers a wide variety of sub-commands that utilize the core framework. Keystore \u00b6 The keystore command that allows users to interact with the system keyring that DMux uses to house credentials. You can use keystore to --reset existing credentials or to --view one of your credentials. Arguments: -h --help Print help information --reset Reset keyring creds: [nautobot_v1,netbox] --view Reset keyring creds: [nautobot_v1,netbox] Command Usage dmux keystore --view nautobot dmux keystore --reset nautobot Info \u00b6 The info command is a useful command to gather information about a device or resource from systems. Arguments: positional-arg One of DeviceName, IPAddress, DeviceID -h --help Print help information -t --tag Devices with a tag -s --site Devices within a given site name. -m --mac-address Devices within a given mac-address. --serial Devices by serial number. Command Usage dmux info <device_id> dmux info <device_name> dmux info <device_ip_address> dmux info --serial <serial_number> SSH \u00b6 The ssh command provides an easy helper when connecting to network devices via ssh. Since DMux handles credentials via the system keyring service, it can also handle setting up your ssh session and logging into the device. Arguments: positional-arg One of DeviceName, IPAddress, DeviceID -h --help Print help information -p --port SSH port to use. Default: 22. Default: 22 Command Usage dmux ssh <device_id> dmux ssh <device_name> dmux ssh <device_ip_address> dmux ssh <device_name> --port 2022 Version \u00b6 The version command is core functionality to DMux and is used to display details about the DMux installation. Command Usage dmux version DMux Version: v0.2.1 \u00b0 Runtime: darwin_amd64 \u00b0 Version Checked At: 2022-09-02 13:54:20 -0500 CDT \u00b0 Next Version Check At: 2022-09-03 13:54:20 -0500 CDT","title":"Usage Guide"},{"location":"usage_guide/#usage-guide","text":"DMux uses a custom framework model where the core Go code focuses on system functionality, whereas the plugin system offers a wide variety of sub-commands that utilize the core framework.","title":"Usage Guide"},{"location":"usage_guide/#keystore","text":"The keystore command that allows users to interact with the system keyring that DMux uses to house credentials. You can use keystore to --reset existing credentials or to --view one of your credentials. Arguments: -h --help Print help information --reset Reset keyring creds: [nautobot_v1,netbox] --view Reset keyring creds: [nautobot_v1,netbox] Command Usage dmux keystore --view nautobot dmux keystore --reset nautobot","title":"Keystore"},{"location":"usage_guide/#info","text":"The info command is a useful command to gather information about a device or resource from systems. Arguments: positional-arg One of DeviceName, IPAddress, DeviceID -h --help Print help information -t --tag Devices with a tag -s --site Devices within a given site name. -m --mac-address Devices within a given mac-address. --serial Devices by serial number. Command Usage dmux info <device_id> dmux info <device_name> dmux info <device_ip_address> dmux info --serial <serial_number>","title":"Info"},{"location":"usage_guide/#ssh","text":"The ssh command provides an easy helper when connecting to network devices via ssh. Since DMux handles credentials via the system keyring service, it can also handle setting up your ssh session and logging into the device. Arguments: positional-arg One of DeviceName, IPAddress, DeviceID -h --help Print help information -p --port SSH port to use. Default: 22. Default: 22 Command Usage dmux ssh <device_id> dmux ssh <device_name> dmux ssh <device_ip_address> dmux ssh <device_name> --port 2022","title":"SSH"},{"location":"usage_guide/#version","text":"The version command is core functionality to DMux and is used to display details about the DMux installation. Command Usage dmux version DMux Version: v0.2.1 \u00b0 Runtime: darwin_amd64 \u00b0 Version Checked At: 2022-09-02 13:54:20 -0500 CDT \u00b0 Next Version Check At: 2022-09-03 13:54:20 -0500 CDT","title":"Version"}]}